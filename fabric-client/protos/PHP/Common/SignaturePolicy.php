<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/policies.proto

namespace Common;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * SignaturePolicy is a recursive message structure which defines a featherweight DSL for describing
 * policies which are more complicated than 'exactly this signature'.  The NOutOf operator is sufficent
 * to express AND as well as OR, as well as of course N out of the following M policies
 * SignedBy implies that the signature is from a valid certificate which is signed by the trusted
 * authority specified in the bytes.  This will be the certificate itself for a self-signed certificate
 * and will be the CA for more traditional certificates
 * </pre>
 *
 * Protobuf type <code>common.SignaturePolicy</code>
 */
class SignaturePolicy extends \Google\Protobuf\Internal\Message
{
    protected $Type;

    public function __construct() {
        \GPBMetadata\Common\Policies::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 signed_by = 1;</code>
     */
    public function getSignedBy()
    {
        return $this->readOneof(1);
    }

    /**
     * <code>int32 signed_by = 1;</code>
     */
    public function setSignedBy($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(1, $var);
    }

    /**
     * <code>.common.SignaturePolicy.NOutOf n_out_of = 2;</code>
     */
    public function getNOutOf()
    {
        return $this->readOneof(2);
    }

    /**
     * <code>.common.SignaturePolicy.NOutOf n_out_of = 2;</code>
     */
    public function setNOutOf(&$var)
    {
        GPBUtil::checkMessage($var, \Common\SignaturePolicy_NOutOf::class);
        $this->writeOneof(2, $var);
    }

    public function getType()
    {
        return $this->whichOneof("Type");
    }

}

