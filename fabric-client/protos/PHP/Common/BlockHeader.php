<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/common.proto

namespace Common;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * BlockHeader is the element of the block which forms the block chain
 * The block header is hashed using the configured chain hashing algorithm
 * over the ASN.1 encoding of the BlockHeader
 * </pre>
 *
 * Protobuf type <code>common.BlockHeader</code>
 */
class BlockHeader extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The position in the blockchain
     * </pre>
     *
     * <code>uint64 number = 1;</code>
     */
    private $number = 0;
    /**
     * <pre>
     * The hash of the previous block header
     * </pre>
     *
     * <code>bytes previous_hash = 2;</code>
     */
    private $previous_hash = '';
    /**
     * <pre>
     * The hash of the BlockData, by MerkleTree
     * </pre>
     *
     * <code>bytes data_hash = 3;</code>
     */
    private $data_hash = '';

    public function __construct() {
        \GPBMetadata\Common\Common::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The position in the blockchain
     * </pre>
     *
     * <code>uint64 number = 1;</code>
     */
    public function getNumber()
    {
        return $this->number;
    }

    /**
     * <pre>
     * The position in the blockchain
     * </pre>
     *
     * <code>uint64 number = 1;</code>
     */
    public function setNumber($var)
    {
        GPBUtil::checkUint64($var);
        $this->number = $var;
    }

    /**
     * <pre>
     * The hash of the previous block header
     * </pre>
     *
     * <code>bytes previous_hash = 2;</code>
     */
    public function getPreviousHash()
    {
        return $this->previous_hash;
    }

    /**
     * <pre>
     * The hash of the previous block header
     * </pre>
     *
     * <code>bytes previous_hash = 2;</code>
     */
    public function setPreviousHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->previous_hash = $var;
    }

    /**
     * <pre>
     * The hash of the BlockData, by MerkleTree
     * </pre>
     *
     * <code>bytes data_hash = 3;</code>
     */
    public function getDataHash()
    {
        return $this->data_hash;
    }

    /**
     * <pre>
     * The hash of the BlockData, by MerkleTree
     * </pre>
     *
     * <code>bytes data_hash = 3;</code>
     */
    public function setDataHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->data_hash = $var;
    }

}

