<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: msp/msp_config.proto

namespace Msp;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * KeyInfo represents a (secret) key that is either already stored
 * in the bccsp/keystore or key material to be imported to the
 * bccsp key-store. In later versions it may contain also a
 * keystore identifier
 * </pre>
 *
 * Protobuf type <code>msp.KeyInfo</code>
 */
class KeyInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Identifier of the key inside the default keystore; this for
     * the case of Software BCCSP as well as the HSM BCCSP would be
     * the SKI of the key
     * </pre>
     *
     * <code>string key_identifier = 1;</code>
     */
    private $key_identifier = '';
    /**
     * <pre>
     * KeyMaterial (optional) for the key to be imported; this is
     * properly encoded key bytes, prefixed by the type of the key
     * </pre>
     *
     * <code>bytes key_material = 2;</code>
     */
    private $key_material = '';

    public function __construct() {
        \GPBMetadata\Msp\MspConfig::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Identifier of the key inside the default keystore; this for
     * the case of Software BCCSP as well as the HSM BCCSP would be
     * the SKI of the key
     * </pre>
     *
     * <code>string key_identifier = 1;</code>
     */
    public function getKeyIdentifier()
    {
        return $this->key_identifier;
    }

    /**
     * <pre>
     * Identifier of the key inside the default keystore; this for
     * the case of Software BCCSP as well as the HSM BCCSP would be
     * the SKI of the key
     * </pre>
     *
     * <code>string key_identifier = 1;</code>
     */
    public function setKeyIdentifier($var)
    {
        GPBUtil::checkString($var, True);
        $this->key_identifier = $var;
    }

    /**
     * <pre>
     * KeyMaterial (optional) for the key to be imported; this is
     * properly encoded key bytes, prefixed by the type of the key
     * </pre>
     *
     * <code>bytes key_material = 2;</code>
     */
    public function getKeyMaterial()
    {
        return $this->key_material;
    }

    /**
     * <pre>
     * KeyMaterial (optional) for the key to be imported; this is
     * properly encoded key bytes, prefixed by the type of the key
     * </pre>
     *
     * <code>bytes key_material = 2;</code>
     */
    public function setKeyMaterial($var)
    {
        GPBUtil::checkString($var, False);
        $this->key_material = $var;
    }

}

