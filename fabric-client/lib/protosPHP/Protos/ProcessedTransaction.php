<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: peer/transaction.proto

namespace Protos;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * ProcessedTransaction wraps an Envelope that includes a transaction along with an indication
 * of whether the transaction was validated or invalidated by committing peer.
 * The use case is that GetTransactionByID API needs to retrieve the transaction Envelope
 * from block storage, and return it to a client, and indicate whether the transaction
 * was validated or invalidated by committing peer. So that the originally submitted
 * transaction Envelope is not modified, the ProcessedTransaction wrapper is returned.
 * </pre>
 *
 * Protobuf type <code>protos.ProcessedTransaction</code>
 */
class ProcessedTransaction extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * An Envelope which includes a processed transaction
     * </pre>
     *
     * <code>.common.Envelope transactionEnvelope = 1;</code>
     */
    private $transactionEnvelope = null;
    /**
     * <pre>
     * An indication of whether the transaction was validated or invalidated by committing peer
     * </pre>
     *
     * <code>int32 validationCode = 2;</code>
     */
    private $validationCode = 0;

    public function __construct() {
        \GPBMetadata\Peer\Transaction::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * An Envelope which includes a processed transaction
     * </pre>
     *
     * <code>.common.Envelope transactionEnvelope = 1;</code>
     */
    public function getTransactionEnvelope()
    {
        return $this->transactionEnvelope;
    }

    /**
     * <pre>
     * An Envelope which includes a processed transaction
     * </pre>
     *
     * <code>.common.Envelope transactionEnvelope = 1;</code>
     */
    public function setTransactionEnvelope(&$var)
    {
        GPBUtil::checkMessage($var, \Common\Envelope::class);
        $this->transactionEnvelope = $var;
    }

    /**
     * <pre>
     * An indication of whether the transaction was validated or invalidated by committing peer
     * </pre>
     *
     * <code>int32 validationCode = 2;</code>
     */
    public function getValidationCode()
    {
        return $this->validationCode;
    }

    /**
     * <pre>
     * An indication of whether the transaction was validated or invalidated by committing peer
     * </pre>
     *
     * <code>int32 validationCode = 2;</code>
     */
    public function setValidationCode($var)
    {
        GPBUtil::checkInt32($var);
        $this->validationCode = $var;
    }

}

