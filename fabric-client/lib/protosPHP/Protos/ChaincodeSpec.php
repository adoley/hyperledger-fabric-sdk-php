<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: peer/chaincode.proto

namespace Protos;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Carries the chaincode specification. This is the actual metadata required for
 * defining a chaincode.
 * </pre>
 *
 * Protobuf type <code>protos.ChaincodeSpec</code>
 */
class ChaincodeSpec extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>.protos.ChaincodeSpec.Type type = 1;</code>
     */
    private $type = 0;
    /**
     * <code>.protos.ChaincodeID chaincode_id = 2;</code>
     */
    private $chaincode_id = null;
    /**
     * <code>.protos.ChaincodeInput input = 3;</code>
     */
    private $input = null;
    /**
     * <code>int32 timeout = 4;</code>
     */
    private $timeout = 0;

    public function __construct() {
        \GPBMetadata\Peer\Chaincode::initOnce();
        parent::__construct();
    }

    /**
     * <code>.protos.ChaincodeSpec.Type type = 1;</code>
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * <code>.protos.ChaincodeSpec.Type type = 1;</code>
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Protos\ChaincodeSpec_Type::class);
        $this->type = $var;
    }

    /**
     * <code>.protos.ChaincodeID chaincode_id = 2;</code>
     */
    public function getChaincodeId()
    {
        return $this->chaincode_id;
    }

    /**
     * <code>.protos.ChaincodeID chaincode_id = 2;</code>
     */
    public function setChaincodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Protos\ChaincodeID::class);
        $this->chaincode_id = $var;
    }

    /**
     * <code>.protos.ChaincodeInput input = 3;</code>
     */
    public function getInput()
    {
        return $this->input;
    }

    /**
     * <code>.protos.ChaincodeInput input = 3;</code>
     */
    public function setInput(&$var)
    {
        GPBUtil::checkMessage($var, \Protos\ChaincodeInput::class);
        $this->input = $var;
    }

    /**
     * <code>int32 timeout = 4;</code>
     */
    public function getTimeout()
    {
        return $this->timeout;
    }

    /**
     * <code>int32 timeout = 4;</code>
     */
    public function setTimeout($var)
    {
        GPBUtil::checkInt32($var);
        $this->timeout = $var;
    }

}

