<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/common.proto

namespace Common;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>common.SignatureHeader</code>
 */
class SignatureHeader extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Creator of the message, specified as a certificate chain
     * </pre>
     *
     * <code>bytes creator = 1;</code>
     */
    private $creator = '';
    /**
     * <pre>
     * Arbitrary number that may only be used once. Can be used to detect replay attacks.
     * </pre>
     *
     * <code>bytes nonce = 2;</code>
     */
    private $nonce = '';

    public function __construct() {
        \GPBMetadata\Common\Common::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Creator of the message, specified as a certificate chain
     * </pre>
     *
     * <code>bytes creator = 1;</code>
     */
    public function getCreator()
    {
        return $this->creator;
    }

    /**
     * <pre>
     * Creator of the message, specified as a certificate chain
     * </pre>
     *
     * <code>bytes creator = 1;</code>
     */
    public function setCreator($var)
    {
        GPBUtil::checkString($var, False);
        $this->creator = $var;
    }

    /**
     * <pre>
     * Arbitrary number that may only be used once. Can be used to detect replay attacks.
     * </pre>
     *
     * <code>bytes nonce = 2;</code>
     */
    public function getNonce()
    {
        return $this->nonce;
    }

    /**
     * <pre>
     * Arbitrary number that may only be used once. Can be used to detect replay attacks.
     * </pre>
     *
     * <code>bytes nonce = 2;</code>
     */
    public function setNonce($var)
    {
        GPBUtil::checkString($var, False);
        $this->nonce = $var;
    }

}

