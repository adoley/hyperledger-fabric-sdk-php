<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: peer/proposal.proto

namespace Hyperledger\Fabric\Protos\Peer;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * ChaincodeHeaderExtension is the Header's extentions message to be used when
 * the Header's type is CHAINCODE.  This extensions is used to specify which
 * chaincode to invoke and what should appear on the ledger.
 *
 * Generated from protobuf message <code>protos.ChaincodeHeaderExtension</code>
 */
class ChaincodeHeaderExtension extends \Google\Protobuf\Internal\Message
{
    /**
     * The PayloadVisibility field controls to what extent the Proposal's payload
     * (recall that for the type CHAINCODE, it is ChaincodeProposalPayload
     * message) field will be visible in the final transaction and in the ledger.
     * Ideally, it would be configurable, supporting at least 3 main visibility
     * modes:
     * 1. all bytes of the payload are visible;
     * 2. only a hash of the payload is visible;
     * 3. nothing is visible.
     * Notice that the visibility function may be potentially part of the ESCC.
     * In that case it overrides PayloadVisibility field.  Finally notice that
     * this field impacts the content of ProposalResponsePayload.proposalHash.
     *
     * Generated from protobuf field <code>bytes payload_visibility = 1;</code>
     */
    private $payload_visibility = '';
    /**
     * The ID of the chaincode to target.
     *
     * Generated from protobuf field <code>.protos.ChaincodeID chaincode_id = 2;</code>
     */
    private $chaincode_id = null;

    public function __construct() {
        \GPBMetadata\Peer\Proposal::initOnce();
        parent::__construct();
    }

    /**
     * The PayloadVisibility field controls to what extent the Proposal's payload
     * (recall that for the type CHAINCODE, it is ChaincodeProposalPayload
     * message) field will be visible in the final transaction and in the ledger.
     * Ideally, it would be configurable, supporting at least 3 main visibility
     * modes:
     * 1. all bytes of the payload are visible;
     * 2. only a hash of the payload is visible;
     * 3. nothing is visible.
     * Notice that the visibility function may be potentially part of the ESCC.
     * In that case it overrides PayloadVisibility field.  Finally notice that
     * this field impacts the content of ProposalResponsePayload.proposalHash.
     *
     * Generated from protobuf field <code>bytes payload_visibility = 1;</code>
     * @return string
     */
    public function getPayloadVisibility()
    {
        return $this->payload_visibility;
    }

    /**
     * The PayloadVisibility field controls to what extent the Proposal's payload
     * (recall that for the type CHAINCODE, it is ChaincodeProposalPayload
     * message) field will be visible in the final transaction and in the ledger.
     * Ideally, it would be configurable, supporting at least 3 main visibility
     * modes:
     * 1. all bytes of the payload are visible;
     * 2. only a hash of the payload is visible;
     * 3. nothing is visible.
     * Notice that the visibility function may be potentially part of the ESCC.
     * In that case it overrides PayloadVisibility field.  Finally notice that
     * this field impacts the content of ProposalResponsePayload.proposalHash.
     *
     * Generated from protobuf field <code>bytes payload_visibility = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setPayloadVisibility($var)
    {
        GPBUtil::checkString($var, False);
        $this->payload_visibility = $var;

        return $this;
    }

    /**
     * The ID of the chaincode to target.
     *
     * Generated from protobuf field <code>.protos.ChaincodeID chaincode_id = 2;</code>
     * @return \Hyperledger\Fabric\Protos\Peer\ChaincodeID
     */
    public function getChaincodeId()
    {
        return $this->chaincode_id;
    }

    /**
     * The ID of the chaincode to target.
     *
     * Generated from protobuf field <code>.protos.ChaincodeID chaincode_id = 2;</code>
     * @param \Hyperledger\Fabric\Protos\Peer\ChaincodeID $var
     * @return $this
     */
    public function setChaincodeId($var)
    {
        GPBUtil::checkMessage($var, \Hyperledger\Fabric\Protos\Peer\ChaincodeID::class);
        $this->chaincode_id = $var;

        return $this;
    }

}

