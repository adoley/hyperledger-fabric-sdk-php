<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/common.proto

namespace Hyperledger\Fabric\Protos\Common;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Header is a generic replay prevention and identity message to include in a signed payload
 *
 * Generated from protobuf message <code>common.ChannelHeader</code>
 */
class ChannelHeader extends \Google\Protobuf\Internal\Message
{
    /**
     * Header types 0-10000 are reserved and defined by HeaderType
     *
     * Generated from protobuf field <code>int32 type = 1;</code>
     */
    private $type = 0;
    /**
     * Version indicates message protocol version
     *
     * Generated from protobuf field <code>int32 version = 2;</code>
     */
    private $version = 0;
    /**
     * Timestamp is the local time when the message was created
     * by the sender
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 3;</code>
     */
    private $timestamp = null;
    /**
     * Identifier of the channel this message is bound for
     *
     * Generated from protobuf field <code>string channel_id = 4;</code>
     */
    private $channel_id = '';
    /**
     * An unique identifier that is used end-to-end.
     *  -  set by higher layers such as end user or SDK
     *  -  passed to the endorser (which will check for uniqueness)
     *  -  as the header is passed along unchanged, it will be
     *     be retrieved by the committer (uniqueness check here as well)
     *  -  to be stored in the ledger
     *
     * Generated from protobuf field <code>string tx_id = 5;</code>
     */
    private $tx_id = '';
    /**
     * The epoch in which this header was generated, where epoch is defined based on block height
     * Epoch in which the response has been generated. This field identifies a
     * logical window of time. A proposal response is accepted by a peer only if
     * two conditions hold:
     * 1. the epoch specified in the message is the current epoch
     * 2. this message has been only seen once during this epoch (i.e. it hasn't
     *    been replayed)
     *
     * Generated from protobuf field <code>uint64 epoch = 6;</code>
     */
    private $epoch = 0;
    /**
     * Extension that may be attached based on the header type
     *
     * Generated from protobuf field <code>bytes extension = 7;</code>
     */
    private $extension = '';

    public function __construct() {
        \GPBMetadata\Common\Common::initOnce();
        parent::__construct();
    }

    /**
     * Header types 0-10000 are reserved and defined by HeaderType
     *
     * Generated from protobuf field <code>int32 type = 1;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Header types 0-10000 are reserved and defined by HeaderType
     *
     * Generated from protobuf field <code>int32 type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkInt32($var);
        $this->type = $var;

        return $this;
    }

    /**
     * Version indicates message protocol version
     *
     * Generated from protobuf field <code>int32 version = 2;</code>
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Version indicates message protocol version
     *
     * Generated from protobuf field <code>int32 version = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkInt32($var);
        $this->version = $var;

        return $this;
    }

    /**
     * Timestamp is the local time when the message was created
     * by the sender
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 3;</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * Timestamp is the local time when the message was created
     * by the sender
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 3;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * Identifier of the channel this message is bound for
     *
     * Generated from protobuf field <code>string channel_id = 4;</code>
     * @return string
     */
    public function getChannelId()
    {
        return $this->channel_id;
    }

    /**
     * Identifier of the channel this message is bound for
     *
     * Generated from protobuf field <code>string channel_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setChannelId($var)
    {
        GPBUtil::checkString($var, True);
        $this->channel_id = $var;

        return $this;
    }

    /**
     * An unique identifier that is used end-to-end.
     *  -  set by higher layers such as end user or SDK
     *  -  passed to the endorser (which will check for uniqueness)
     *  -  as the header is passed along unchanged, it will be
     *     be retrieved by the committer (uniqueness check here as well)
     *  -  to be stored in the ledger
     *
     * Generated from protobuf field <code>string tx_id = 5;</code>
     * @return string
     */
    public function getTxId()
    {
        return $this->tx_id;
    }

    /**
     * An unique identifier that is used end-to-end.
     *  -  set by higher layers such as end user or SDK
     *  -  passed to the endorser (which will check for uniqueness)
     *  -  as the header is passed along unchanged, it will be
     *     be retrieved by the committer (uniqueness check here as well)
     *  -  to be stored in the ledger
     *
     * Generated from protobuf field <code>string tx_id = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setTxId($var)
    {
        GPBUtil::checkString($var, True);
        $this->tx_id = $var;

        return $this;
    }

    /**
     * The epoch in which this header was generated, where epoch is defined based on block height
     * Epoch in which the response has been generated. This field identifies a
     * logical window of time. A proposal response is accepted by a peer only if
     * two conditions hold:
     * 1. the epoch specified in the message is the current epoch
     * 2. this message has been only seen once during this epoch (i.e. it hasn't
     *    been replayed)
     *
     * Generated from protobuf field <code>uint64 epoch = 6;</code>
     * @return int|string
     */
    public function getEpoch()
    {
        return $this->epoch;
    }

    /**
     * The epoch in which this header was generated, where epoch is defined based on block height
     * Epoch in which the response has been generated. This field identifies a
     * logical window of time. A proposal response is accepted by a peer only if
     * two conditions hold:
     * 1. the epoch specified in the message is the current epoch
     * 2. this message has been only seen once during this epoch (i.e. it hasn't
     *    been replayed)
     *
     * Generated from protobuf field <code>uint64 epoch = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setEpoch($var)
    {
        GPBUtil::checkUint64($var);
        $this->epoch = $var;

        return $this;
    }

    /**
     * Extension that may be attached based on the header type
     *
     * Generated from protobuf field <code>bytes extension = 7;</code>
     * @return string
     */
    public function getExtension()
    {
        return $this->extension;
    }

    /**
     * Extension that may be attached based on the header type
     *
     * Generated from protobuf field <code>bytes extension = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setExtension($var)
    {
        GPBUtil::checkString($var, False);
        $this->extension = $var;

        return $this;
    }

}

